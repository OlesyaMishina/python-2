# Задание №1
# Вспомните какие модули вы уже проходили на курсе.
# Создайте файл, в котором вы импортируете встроенные в модуль функции под псевдонимами. (3-7 строк импорта).
#
# import random as rnd
# import pandas as pd
# import numpy as np
# import seaborn as sns
# import scipy as sc
# import math as mt
# from decimal import Decimal as D
# from sys import argv as arguments
# from fractions import Fraction as F

# Задание №2
# Создайте модуль с функцией внутри.
# Функция принимает на вход три целых числа: нижнюю и верхнюю границу и количество попыток.
# Внутри генерируется случайное число в указанных границах и пользователь должен угадать его за заданное число попыток.
# Функция выводит подсказки “больше” и “меньше”.
# Если число угадано, возвращается истина, а если попытки исчерпаны - ложь.
# Задание №3 Улучшаем задачу 2.
# Добавьте возможность запуска функции “угадайки” из модуля в командной строке терминала.
# Строка должна принимать от 1 до 3 аргументов: параметры вызова функции.
# Для преобразования строковых аргументов командной строки в числовые параметры используйте генераторное выражение.

# from random import randint
# from sys import argv
#
# def guess_number(low:int=0, up:int=100, counter:int=10)->bool:
#     guess = randint(low, up)
#     for _ in range(counter):
#         number = int(input("Введите число: "))
#         if number < guess:
#             print("Загаданное число больше")
#         elif number > guess:
#             print("Загаданное число меньше")
#         else:
#             print("Поздравляю Вы угадали!")
#             return True
#     print("Увы, Вы не угадали. Попытки кончились")
#     return False
#
# if __name__ == '__main__':
#     param = argv[1:]
#
#     guess_number(*(int(item) for item in param))
#     # print(argv)

# Задание №4
# Создайте модуль с функцией внутри.
# Функция получает на вход загадку, список с возможными вариантами отгадок и количество попыток на угадывание.
# Программа возвращает номер попытки, с которой была отгадана загадка или ноль, если попытки исчерпаны.

__all__ = ['puzzles_storage', 'puzzles']


def save_results(text: str, num: int):
    _data[text] = num


def show_results():
    res = (
        f"Загадку {k} не угадали" if not v
        else f"Вы угадали загадку {k} с {v} попытки"
        for k, v in _data.items()
    )
    print(*res, sep='\n')


def puzzles(puzzle: str, answers: list[str], counter: int = 3) -> int:
    print("Отгадай загадку")
    print(f'{puzzle}')
    for i in range(counter):
        answer = input("Введите ответ: ").lower()
        if answer in answers:
            print("Поздравляем, Вы угадали")
            return i + 1
    print("К сожалению Вы не угадали. Попытки исчерпаны.")
    return 0


# Задание №5
# Добавьте в модуль с загадками функцию, которая хранит словарь списков.
# Ключ словаря - загадка, значение - список с отгадками.
# Функция в цикле вызывает загадывающую функцию, чтобы передать ей все свои загадки.

_data = {}


def puzzles_storage():
    storage = {
        "Зимой и летом одним цветом": ["ель", "елка", "ёлка", "сосна"],
        "Не лает, не кусает, в дом не пускает": ["замок", "засов", "домофон"],
        "Висит груша, нельзя скушать": ["лампа", "лампочка", "светильник"]
    }
    for k, v in storage.items():
        result = puzzles(k, v)
        save_results(k, result)
    print("Не угадал" if not result else f"Вы угадали с {result} попытки")


if __name__ == '__main__':
    # puzzles("Зимой и летом одним цветом", ["ель", "елка", "ёлка", "сосна"])
    puzzles_storage()
    show_results()
#
# Задание №6
# Добавьте в модуль с загадками функцию, которая принимает на вход строку (текст загадки) и число (номер попытки, с которой она угадана).
# Функция формирует словарь с информацией о результатах отгадывания.
# Для хранения используйте защищённый словарь уровня модуля.
# Отдельно напишите функцию, которая выводит результаты угадывания из защищённого словаря в удобном для чтения виде.
# Для формирования результатов используйте генераторное выражение.
